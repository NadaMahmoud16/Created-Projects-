{
	"info": {
		"_postman_id": "c0ecef9c-1e8e-491a-a768-b31e082ae587",
		"name": "Graduation Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36173658"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"boardname\",\"orange\");\r",
									"pm.environment.set(\"boarddesc\", \"This board color is \" + pm.environment.get(\"boardname\"));\r",
									"pm.environment.set(\"prefs/background\", pm.environment.get(\"boardname\"))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.environment.set(\"boardID\", response.id);\r",
									"\r",
									"pm.test(\"Verfiy that Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Verify that board name is \" + pm.environment.get(\"boardname\"), function () {\r",
									"    pm.expect(response.name).to.eql(\"orange\");\r",
									"});\r",
									"pm.test(\"Verify that board desc is \" + pm.environment.get(\"boarddesc\"), function () {\r",
									"    pm.expect(response.desc).to.eql(pm.environment.get(\"boarddesc\"));\r",
									"});\r",
									"pm.test(\"Verify that the closed attribute is false\", function () {\r",
									"    pm.expect(response.closed).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the pinned attribute is false\", function () {\r",
									"    pm.expect(response.pinned).to.eql(false);\r",
									"});\r",
									"pm.test(\"Verify that the background color is orange\", function () {\r",
									"    pm.expect(response.prefs.background).to.eql('orange');\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardname}}&key={{Key}}&token={{Token}}&desc={{boarddesc}}&prefs_background={{prefs/background}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardname}}"
								},
								{
									"key": "key",
									"value": "{{Key}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								},
								{
									"key": "desc",
									"value": "{{boarddesc}}"
								},
								{
									"key": "prefs_background",
									"value": "{{prefs/background}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randNum = Math.floor(Math.random()*100)+1;\r",
									"\r",
									"pm.environment.set(\"updatedboardname\", \"orange\" + randNum);\r",
									"pm.environment.set(\"updatedboarddesc\", \"board name was \" + pm.environment.get(\"boardname\")+ \" and updated to \" + pm.environment.get(\"updatedboardname\"))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.environment.set(\"boardID\", response.id);\r",
									"\r",
									"pm.test(\"Verify that Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Verify that the updated board name is \" + pm.environment.get(\"updatedboardname\"), function () {\r",
									"    pm.expect(response.name).to.eql(pm.environment.get(\"updatedboardname\"));\r",
									"});\r",
									"pm.test(\"Verify that board desc is \" + pm.environment.get(\"updatedboarddesc\"), function () {\r",
									"    pm.expect(response.desc).to.eql(pm.environment.get(\"updatedboarddesc\"));\r",
									"});\r",
									"pm.test(\"Verify that the closed attribute is false\", function () {\r",
									"    pm.expect(response.closed).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the pinned attribute is false\", function () {\r",
									"    pm.expect(response.pinned).to.eql(false);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{Key}}&token={{Token}}&boardID={{boardID}}&name={{updatedboardname}}&desc={{updatedboarddesc}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								"{{boardID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{Key}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								},
								{
									"key": "boardID",
									"value": "{{boardID}}"
								},
								{
									"key": "name",
									"value": "{{updatedboardname}}"
								},
								{
									"key": "desc",
									"value": "{{updatedboarddesc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Verify that the updated board name is \" + pm.environment.get(\"updatedboardname\"), function () {\r",
									"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"updatedboardname\"));\r",
									"});\r",
									"pm.test(\"Verify that board desc is \" + pm.environment.get(\"updatedboarddesc\"), function () {\r",
									"    pm.expect(pm.response.json().desc).to.eql(pm.environment.get(\"updatedboarddesc\"));\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{Key}}&token={{Token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								"{{boardID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{Key}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{Key}}&token={{Token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								"{{boardID}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{Key}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lists",
			"item": [
				{
					"name": "ListOne",
					"item": [
						{
							"name": "Create ListOne",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  var response = pm.response.json();\r",
											"pm.environment.set(\"ListOneid\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that list name is ListOne created on \"+ pm.environment.get(\"updatedboardname\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"ListOne\");\r",
											"});\r",
											"pm.test(\"Verify that the closed attribute is false\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.closed).to.eql(false);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/boards/{{boardID}}/lists?key={{Key}}&token={{Token}}&name=ListOne",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}",
										"lists"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "ListOne"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ListOne",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that list name is ListOne created on board name \"+ pm.environment.get(\"updatedboardname\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"ListOne\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/lists/{{ListOneid}}?key={{Key}}&token={{Token}}&pos=bottom",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"lists",
										"{{ListOneid}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "pos",
											"value": "bottom"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read updated ListOne",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that listOne id is \"+ pm.environment.get(\"ListOneid\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ListOneid\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/lists/{{ListOneid}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"lists",
										"{{ListOneid}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ListTwo",
					"item": [
						{
							"name": "Create ListTwo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var response = pm.response.json();\r",
											"pm.environment.set(\"ListTwoid\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that list name is ListTwo created on board name \"+ pm.environment.get(\"updatedboardname\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"ListTwo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that the closed attribute is false\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.closed).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/{{boardID}}/lists?key={{Key}}&token={{Token}}&name=ListTwo",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}",
										"lists"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "ListTwo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ListTwo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that the closed attribute is true\", function () {\r",
											"    pm.expect(pm.response.json().closed).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"value\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/lists/{{ListTwoid}}/closed?key={{Key}}&token={{Token}}&closed=true",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"lists",
										"{{ListTwoid}}",
										"closed"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "closed",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read updated ListTwo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that listTwo id is \"+ pm.environment.get(\"ListTwoid\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ListTwoid\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/lists/{{ListTwoid}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"lists",
										"{{ListTwoid}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cards",
			"item": [
				{
					"name": "card1",
					"item": [
						{
							"name": "Create card1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randNum = Math.floor(Math.random()*100)+1;\r",
											"\r",
											"pm.environment.set(\"cardname\", \"Testcase\" + randNum);\r",
											"pm.environment.set(\"listname\", \"ListOne\")\r",
											"pm.environment.set(\"cardcomment\", \"This card name is \"+ pm.environment.get(\"cardname\" ) + \" & it was created on \" + pm.environment.get(\"listname\"))\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();\r",
											"pm.environment.set(\"card1id\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verfiy that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that the card1 name is \"+ pm.environment.get(\"cardname\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"cardname\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards?idList={{ListOneid}}&key={{Key}}&token={{Token}}&name={{cardname}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "idList",
											"value": "{{ListOneid}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "{{cardname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add comment to card1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"listname\", \"ListOne\")\r",
											"pm.environment.set(\"cardcomment\", \"This card name is \"+ pm.environment.get(\"cardname\" ) + \" & it was created on \" + pm.environment.get(\"listname\"))\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that card1 comment is \"+ pm.environment.get(\"cardcomment\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.text).to.eql(pm.environment.get(\"cardcomment\"));\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\" : \"{{cardcomment}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card1id}}/actions/comments?text={{cardcomment}}&key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card1id}}",
										"actions",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "{{cardcomment}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read card1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verify that card id is \"+ pm.environment.get(\"card1id\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"card1id\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card1id}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card1id}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "card2",
					"item": [
						{
							"name": "Create card2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randNum = Math.floor(Math.random()*100)+1;\r",
											"\r",
											"pm.environment.set(\"card2name\", \"Testcase\" + randNum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();\r",
											"pm.environment.set(\"card2id\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verfiy that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that the card2 name is \" + pm.environment.get(\"card2name\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"card2name\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards?idList={{ListOneid}}&key={{Key}}&token={{Token}}&name={{card2name}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "idList",
											"value": "{{ListOneid}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "{{card2name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add comment to card2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"listname\", \"ListOne\")\r",
											"pm.environment.set(\"cardcomment\", \"This card name is \"+ pm.environment.get(\"card2name\" ) + \" & it was created on \" + pm.environment.get(\"listname\"))\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verify that card2 comment is \"+ pm.environment.get(\"cardcomment\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.text).to.eql(pm.environment.get(\"cardcomment\"));\r",
											"    });\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that card2 comment is \"+ pm.environment.get(\"cardcomment\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.text).to.eql(pm.environment.get(\"cardcomment\"));\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\" : \"{{cardcomment}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card2id}}/actions/comments?text={{cardcomment}}&key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card2id}}",
										"actions",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "{{cardcomment}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read card2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verify that card id is \"+ pm.environment.get(\"card2id\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"card2id\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card2id}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card2id}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "card3",
					"item": [
						{
							"name": "Create card3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randNum = Math.floor(Math.random()*100)+1;\r",
											"\r",
											"pm.environment.set(\"card3name\", \"Testcase\" + randNum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();\r",
											"pm.environment.set(\"card3id\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verfiy that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that the card3 name is \" + pm.environment.get(\"card3name\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"card3name\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards?idList={{ListOneid}}&key={{Key}}&token={{Token}}&name={{card3name}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "idList",
											"value": "{{ListOneid}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "{{card3name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add comment to card3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"listname\", \"ListOne\")\r",
											"pm.environment.set(\"cardcomment\", \"This card name is \"+ pm.environment.get(\"card3name\" ) + \" & it was created on \" + pm.environment.get(\"listname\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that card3 comment is \"+ pm.environment.get(\"cardcomment\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.text).to.eql(pm.environment.get(\"cardcomment\"));\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\" : \"{{cardcomment}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card3id}}/actions/comments?text={{cardcomment}}&key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card3id}}",
										"actions",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "{{cardcomment}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read card3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verify that card id is \"+ pm.environment.get(\"card3id\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"card3id\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card3id}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card3id}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "card4",
					"item": [
						{
							"name": "Create card4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randNum = Math.floor(Math.random()*100)+1;\r",
											"\r",
											"pm.environment.set(\"card4name\", \"Testcase\" + randNum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();\r",
											"pm.environment.set(\"card4id\", response.id);\r",
											"\r",
											"pm.test(\"Verfiy that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verfiy that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that the card4 name is \" + pm.environment.get(\"card4name\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"card4name\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards?idList={{ListOneid}}&key={{Key}}&token={{Token}}&name={{card4name}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "idList",
											"value": "{{ListOneid}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										},
										{
											"key": "name",
											"value": "{{card4name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add comment to card4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"listname\", \"ListOne\")\r",
											"pm.environment.set(\"cardcomment\", \"This card name is \"+ pm.environment.get(\"card4name\" ) + \" & it was created on \" + pm.environment.get(\"listname\"))\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});\r",
											"pm.test(\"Verify that card4 comment is \"+ pm.environment.get(\"cardcomment\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.text).to.eql(pm.environment.get(\"cardcomment\"));\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\" : \"{{cardcomment}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card4id}}/actions/comments?text={{cardcomment}}&key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card4id}}",
										"actions",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "{{cardcomment}}"
										},
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read card4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verify that card id is \"+ pm.environment.get(\"card4id\"), function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"card4id\"));\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/{{card4id}}?key={{Key}}&token={{Token}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"{{card4id}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{Key}}"
										},
										{
											"key": "token",
											"value": "{{Token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Done List",
			"item": [
				{
					"name": "Read all cards on List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that the Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify that the Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/{{ListOneid}}/cards?key={{Key}}&token={{Token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								"{{ListOneid}}",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{Key}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}